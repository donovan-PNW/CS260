=== Design and Implementation Plan Questions ===

Below are a few questions about how you will design your program and your
implementation plan. It is crucial to have a reasonable design and
implementation plan before you start your program. Without this, success is
unlikely. The following questions will help guide you in your thinking and
raise some important questions and issues. There is no single "right" answer
to each of the questions but there are some "wrong" answers. Some designs and
plans are better than others. The point here is for you to think about what
you're going to do.

Make a copy of this file and edit it, adding your answers then turn this
document in.

----------------------------------------------------------------------

1) What classes to you intend to create? List each of the classes and provide
a brief description of the role of that class. This list is not set in
stone. As you implement your program, if you find that you need additional
classes that are not in this list, or that something you listed here doesn't
really fit, that's ok. The point is to start thinking about the high-level
structure of your program.

Classes required are: rover, stack, and queue. Rover controls the actual manifestation of data/flow/"desired input/output" in this program. It keeps track of ID, location (in x and y), and a pointer towards the data queue. It also has methods allowing for their control from base. The stack class keeps track of any given rover's location history -- the rover will call upon this class to help it get home when dock is called. The queue class will keep a list of the data gathered from each rover, including rover ID, location, and corescan results.


2) What class do you plan to implement first? Why?

I plan on implementing the rover class first. I find that, concept-wise, it helps to get SOMETHING functioning on a basic level and then build from there. Given that the rover class is the focal point of this assignment, it seems fitting to use it as a nucleus around which to construct the other parts of the program as I work backward towards the supplied rovercontrol.cpp driver. Getting it to actually move, accept input, broadcast data will provide a foundation to work with the stack, and give input for the queue class. The rest will follow. (Just off-topic: If you haven't seen a movie called Moon, you might like it.)

3) Will the copy constructor for the rover create a deep or shallow copy of
the queue? Why?

The copy constructor will need to create a shallow copy of the queue. This is because they're all reporting to the same queue: if I wrote a deep copy constructor each rover would have a different queue.

4) What type of data will be stored in the queue? What type of data will be
stored in the stack?

The queue will store information generated by the scandata class along with the rover's ID and current (x,y) coordinates. This is data from all rovers. The stack will keep track of each individual rover's location history during a given outing.

5) Do you plan to have any private helper methods in your rover class?

At this time, I cannot come up with any beyond some used for beta testing to display error information while writing thie program.

6) How will you make sure that the queue doesn't crawl off the end of the
array?

With a simple error check, of course! Boolean: if(rear of queue == MAX_VAL){return isfull=TRUE}
then: if(isfull){Don't add anything}. ****OR**** Given that the queue is circular, The back connects to the front. So I can simply check if back->next == front. This can be done with a modulo operator: if((back+1) % MAX_VAL == 0){queue is full}.

7) What is your testing strategy? Will you use the testqueue and teststack programs?

I like the test-as-you-build method. I plan to break the program into manageable pieces, test each one (on at least a rudimentary level) and then build whatever piece relies on that piece. I will then go back to make sure it's working once finished (obviously). 

I will ABSOLUTELY be using testqueue and teststack. They will provide extremely convenient (and consistent) input to check output from my stack and queue classes. 

8) What is your strategy for finding and addressing memory leaks? Will you get
the whole program working first and then address memory leaks or will you
check on memory leaks as you go?

As with before, I will test for memory leaks as I go, but probably only at major checkpoints (after finishing each class, for example). This takes a back seat for me, if only because you need something to be up and running before you can figure out how to fix its flaws.



